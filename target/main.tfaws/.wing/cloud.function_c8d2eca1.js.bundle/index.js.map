{"version":3,"sources":["../../../../../../.nvm/versions/node/v20.10.0/lib/node_modules/winglang/node_modules/constructs/src/dependency.ts","../../../../../../.nvm/versions/node/v20.10.0/lib/node_modules/winglang/node_modules/constructs/src/private/stack-trace.ts","../../../../../../.nvm/versions/node/v20.10.0/lib/node_modules/winglang/node_modules/constructs/src/private/uniqueid.ts","../../../../../../.nvm/versions/node/v20.10.0/lib/node_modules/winglang/node_modules/constructs/src/construct.ts","../../../../../../.nvm/versions/node/v20.10.0/lib/node_modules/winglang/node_modules/constructs/lib/metadata.js","../../../../../../.nvm/versions/node/v20.10.0/lib/node_modules/winglang/node_modules/constructs/src/index.ts","../../../../../../.nvm/versions/node/v20.10.0/lib/node_modules/winglang/node_modules/@winglang/sdk/src/core/connections.ts","../../../../../../.nvm/versions/node/v20.10.0/lib/node_modules/winglang/node_modules/@winglang/sdk/src/std/node.ts","../../../../../../.nvm/versions/node/v20.10.0/lib/node_modules/winglang/node_modules/@winglang/sdk/src/helpers.ts","../../../../main.w","../cloud.function_c8d2eca1.js"],"sourcesContent":["import { IConstruct } from './construct';\n\n/**\n * Trait marker for classes that can be depended upon\n *\n * The presence of this interface indicates that an object has\n * an `IDependable` implementation.\n *\n * This interface can be used to take an (ordering) dependency on a set of\n * constructs. An ordering dependency implies that the resources represented by\n * those constructs are deployed before the resources depending ON them are\n * deployed.\n */\nexport interface IDependable {\n  // Empty, this interface is a trait marker\n}\n\n/**\n * A set of constructs to be used as a dependable\n *\n * This class can be used when a set of constructs which are disjoint in the\n * construct tree needs to be combined to be used as a single dependable.\n *\n * @experimental\n */\nexport class DependencyGroup implements IDependable {\n  private readonly _deps = new Array<IDependable>();\n\n  constructor(...deps: IDependable[]) {\n    const self = this;\n\n    Dependable.implement(this, {\n      get dependencyRoots() {\n        const result = new Array<IConstruct>();\n        for (const d of self._deps) {\n          result.push(...Dependable.of(d).dependencyRoots);\n        }\n        return result;\n      },\n    });\n\n    this.add(...deps);\n  }\n\n  /**\n   * Add a construct to the dependency roots\n   */\n  public add(...scopes: IDependable[]) {\n    this._deps.push(...scopes);\n  }\n}\n\nconst DEPENDABLE_SYMBOL = Symbol.for('@aws-cdk/core.DependableTrait');\n\n/**\n * Trait for IDependable\n *\n * Traits are interfaces that are privately implemented by objects. Instead of\n * showing up in the public interface of a class, they need to be queried\n * explicitly. This is used to implement certain framework features that are\n * not intended to be used by Construct consumers, and so should be hidden\n * from accidental use.\n *\n * @example\n *\n * // Usage\n * const roots = Dependable.of(construct).dependencyRoots;\n *\n * // Definition\n * Dependable.implement(construct, {\n *       dependencyRoots: [construct],\n * });\n *\n * @experimental\n */\nexport abstract class Dependable {\n  /**\n   * Turn any object into an IDependable.\n   */\n  public static implement(instance: IDependable, trait: Dependable) {\n    // I would also like to reference classes (to cut down on the list of objects\n    // we need to manage), but we can't do that either since jsii doesn't have the\n    // concept of a class reference.\n    (instance as any)[DEPENDABLE_SYMBOL] = trait;\n  }\n\n  /**\n   * Return the matching Dependable for the given class instance.\n   */\n  public static of(instance: IDependable): Dependable {\n    const ret = (instance as any)[DEPENDABLE_SYMBOL];\n    if (!ret) {\n      throw new Error(`${instance} does not implement IDependable. Use \"Dependable.implement()\" to implement`);\n    }\n    return ret;\n  }\n\n  /**\n   * Return the matching Dependable for the given class instance.\n   * @deprecated use `of`\n   */\n  public static get(instance: IDependable): Dependable {\n    return this.of(instance);\n  }\n\n  /**\n   * The set of constructs that form the root of this dependable\n   *\n   * All resources under all returned constructs are included in the ordering\n   * dependency.\n   */\n  public abstract readonly dependencyRoots: IConstruct[];\n}\n","// tslint:disable-next-line:ban-types\nexport function captureStackTrace(below?: Function): string[] {\n  below = below || captureStackTrace; // hide myself if nothing else\n  const object = { stack: '' };\n  const previousLimit = Error.stackTraceLimit;\n  try {\n    Error.stackTraceLimit = Number.MAX_SAFE_INTEGER;\n    Error.captureStackTrace(object, below);\n  } finally {\n    Error.stackTraceLimit = previousLimit;\n  }\n  if (!object.stack) {\n    return [];\n  }\n  return object.stack.split('\\n').slice(1).map(s => s.replace(/^\\s*at\\s+/, ''));\n}\n","import * as crypto from 'crypto';\n\n/**\n * Resources with this ID are complete hidden from the logical ID calculation.\n */\nconst HIDDEN_ID = 'Default';\n\n/**\n * Calculates the construct uid based on path components.\n *\n * Components named `Default` (case sensitive) are excluded from uid calculation\n * to allow tree refactorings.\n *\n * @param components path components\n */\nexport function addressOf(components: string[]) {\n  const hash = crypto.createHash('sha1');\n  for (const c of components) {\n    // skip components called \"Default\" to enable refactorings\n    if (c === HIDDEN_ID) { continue; }\n\n    hash.update(c);\n    hash.update('\\n');\n  }\n\n  // prefix with \"c8\" so to ensure it starts with non-digit.\n  return 'c8' + hash.digest('hex');\n}\n","import { Dependable, IDependable } from './dependency';\nimport { MetadataEntry } from './metadata';\nimport { captureStackTrace } from './private/stack-trace';\nimport { addressOf } from './private/uniqueid';\n\nconst CONSTRUCT_SYM = Symbol.for('constructs.Construct');\n\n/**\n * Represents a construct.\n */\nexport interface IConstruct extends IDependable {\n  /**\n   * The tree node.\n   */\n  readonly node: Node;\n}\n\n/**\n * Represents the construct node in the scope tree.\n */\nexport class Node {\n  /**\n   * Separator used to delimit construct path components.\n   */\n  public static readonly PATH_SEP = '/';\n\n  /**\n   * Returns the node associated with a construct.\n   * @param construct the construct\n   *\n   * @deprecated use `construct.node` instead\n   */\n  public static of(construct: IConstruct): Node {\n    return construct.node;\n  }\n\n  /**\n   * Returns the scope in which this construct is defined.\n   *\n   * The value is `undefined` at the root of the construct scope tree.\n   */\n  public readonly scope?: IConstruct;\n\n  /**\n   * The id of this construct within the current scope.\n   *\n   * This is a scope-unique id. To obtain an app-unique id for this construct, use `addr`.\n   */\n  public readonly id: string;\n\n  private _locked = false; // if this is \"true\", addChild will fail\n  private readonly _children: { [id: string]: IConstruct } = { };\n  private readonly _context: { [key: string]: any } = { };\n  private readonly _metadata = new Array<MetadataEntry>();\n  private readonly _dependencies = new Set<IDependable>();\n  private _defaultChild: IConstruct | undefined;\n  private readonly _validations = new Array<IValidation>();\n  private _addr?: string; // cache\n\n  public constructor(private readonly host: Construct, scope: IConstruct, id: string) {\n    id = id ?? ''; // if undefined, convert to empty string\n\n    this.id = sanitizeId(id);\n    this.scope = scope;\n\n    if (scope && !this.id) {\n      throw new Error('Only root constructs may have an empty ID');\n    }\n\n    // add to parent scope\n    scope?.node.addChild(host, this.id);\n  }\n\n  /**\n   * The full, absolute path of this construct in the tree.\n   *\n   * Components are separated by '/'.\n   */\n  public get path(): string {\n    const components = [];\n    for (const scope of this.scopes) {\n      if (scope.node.id) {\n        components.push(scope.node.id);\n      }\n    }\n    return components.join(Node.PATH_SEP);\n  }\n\n  /**\n   * Returns an opaque tree-unique address for this construct.\n   *\n   * Addresses are 42 characters hexadecimal strings. They begin with \"c8\"\n   * followed by 40 lowercase hexadecimal characters (0-9a-f).\n   *\n   * Addresses are calculated using a SHA-1 of the components of the construct\n   * path.\n   *\n   * To enable refactorings of construct trees, constructs with the ID `Default`\n   * will be excluded from the calculation. In those cases constructs in the\n   * same tree may have the same addreess.\n   *\n   * @example c83a2846e506bcc5f10682b564084bca2d275709ee\n   */\n  public get addr(): string {\n    if (!this._addr) {\n      this._addr = addressOf(this.scopes.map(c => c.node.id));\n    }\n\n    return this._addr;\n  }\n\n  /**\n   * Return a direct child by id, or undefined\n   *\n   * @param id Identifier of direct child\n   * @returns the child if found, or undefined\n   */\n  public tryFindChild(id: string): IConstruct | undefined {\n    return this._children[sanitizeId(id)];\n  }\n\n  /**\n   * Return a direct child by id\n   *\n   * Throws an error if the child is not found.\n   *\n   * @param id Identifier of direct child\n   * @returns Child with the given id.\n   */\n  public findChild(id: string): IConstruct {\n    const ret = this.tryFindChild(id);\n    if (!ret) {\n      throw new Error(`No child with id: '${id}'`);\n    }\n    return ret;\n  }\n\n  /**\n   * Returns the child construct that has the id `Default` or `Resource\"`.\n   * This is usually the construct that provides the bulk of the underlying functionality.\n   * Useful for modifications of the underlying construct that are not available at the higher levels.\n   *\n   * @throws if there is more than one child\n   * @returns a construct or undefined if there is no default child\n   */\n  public get defaultChild(): IConstruct | undefined {\n    if (this._defaultChild !== undefined) {\n      return this._defaultChild;\n    }\n\n    const resourceChild = this.tryFindChild('Resource');\n    const defaultChild = this.tryFindChild('Default');\n    if (resourceChild && defaultChild) {\n      throw new Error(`Cannot determine default child for ${this.path}. There is both a child with id \"Resource\" and id \"Default\"`);\n    }\n\n    return defaultChild || resourceChild;\n  }\n\n  /**\n   * Override the defaultChild property.\n   *\n   * This should only be used in the cases where the correct\n   * default child is not named 'Resource' or 'Default' as it\n   * should be.\n   *\n   * If you set this to undefined, the default behavior of finding\n   * the child named 'Resource' or 'Default' will be used.\n   */\n  public set defaultChild(value: IConstruct | undefined) {\n    this._defaultChild = value;\n  }\n\n  /**\n   * All direct children of this construct.\n   */\n  public get children() {\n    return Object.values(this._children);\n  }\n\n  /**\n   * Return this construct and all of its children in the given order\n   */\n  public findAll(order: ConstructOrder = ConstructOrder.PREORDER): IConstruct[] {\n    const ret = new Array<IConstruct>();\n    visit(this.host);\n    return ret;\n\n    function visit(c: IConstruct) {\n      if (order === ConstructOrder.PREORDER) {\n        ret.push(c);\n      }\n\n      for (const child of c.node.children) {\n        visit(child);\n      }\n\n      if (order === ConstructOrder.POSTORDER) {\n        ret.push(c);\n      }\n    }\n  }\n\n  /**\n   * This can be used to set contextual values.\n   * Context must be set before any children are added, since children may consult context info during construction.\n   * If the key already exists, it will be overridden.\n   * @param key The context key\n   * @param value The context value\n   */\n  public setContext(key: string, value: any) {\n    if (this.children.length > 0) {\n      const names = this.children.map(c => c.node.id);\n      throw new Error('Cannot set context after children have been added: ' + names.join(','));\n    }\n    this._context[key] = value;\n  }\n\n  /**\n   * Retrieves a value from tree context if present. Otherwise, would throw an error.\n   *\n   * Context is usually initialized at the root, but can be overridden at any point in the tree.\n   *\n   * @param key The context key\n   * @returns The context value or throws error if there is no context value for this key\n   */\n  public getContext(key: string): any {\n    const value = this._context[key];\n\n    if (value !== undefined) { return value; }\n\n    if (value === undefined && !this.scope?.node) {\n      throw new Error(`No context value present for ${key} key`);\n    }\n\n    return this.scope && this.scope.node.getContext(key);\n  }\n\n  /**\n   * Retrieves the all context of a node from tree context.\n   *\n   * Context is usually initialized at the root, but can be overridden at any point in the tree.\n   *\n   * @param defaults Any keys to override the retrieved context\n   * @returns The context object or an empty object if there is discovered context\n   */\n  public getAllContext(defaults?: object): any {\n    if (typeof defaults === 'undefined') {\n      defaults = {};\n    }\n\n    if (this.scope === undefined) { return defaults; }\n\n    const value = { ...this._context, ...defaults };\n    return this.scope && this.scope.node.getAllContext(value);\n  }\n\n  /**\n   * Retrieves a value from tree context.\n   *\n   * Context is usually initialized at the root, but can be overridden at any point in the tree.\n   *\n   * @param key The context key\n   * @returns The context value or `undefined` if there is no context value for this key.\n   */\n  public tryGetContext(key: string): any {\n    const value = this._context[key];\n    if (value !== undefined) { return value; }\n\n    return this.scope && this.scope.node.tryGetContext(key);\n  }\n\n  /**\n   * An immutable array of metadata objects associated with this construct.\n   * This can be used, for example, to implement support for deprecation notices, source mapping, etc.\n   */\n  public get metadata() {\n    return [...this._metadata];\n  }\n\n  /**\n   * Adds a metadata entry to this construct.\n   * Entries are arbitrary values and will also include a stack trace to allow tracing back to\n   * the code location for when the entry was added. It can be used, for example, to include source\n   * mapping in CloudFormation templates to improve diagnostics.\n   *\n   * @param type a string denoting the type of metadata\n   * @param data the value of the metadata (can be a Token). If null/undefined, metadata will not be added.\n   * @param options options\n   */\n  public addMetadata(type: string, data: any, options: MetadataOptions = { }): void {\n    if (data == null) {\n      return;\n    }\n\n    const shouldTrace = options.stackTrace ?? false;\n    const trace = shouldTrace ? captureStackTrace(options.traceFromFunction ?? this.addMetadata) : undefined;\n    this._metadata.push({ type, data, trace });\n  }\n\n  /**\n   * All parent scopes of this construct.\n   *\n   * @returns a list of parent scopes. The last element in the list will always\n   * be the current construct and the first element will be the root of the\n   * tree.\n   */\n  public get scopes(): IConstruct[] {\n    const ret = new Array<IConstruct>();\n\n    let curr: IConstruct | undefined = this.host;\n    while (curr) {\n      ret.unshift(curr);\n      curr = curr.node.scope;\n    }\n\n    return ret;\n  }\n\n  /**\n   * Returns the root of the construct tree.\n   * @returns The root of the construct tree.\n   */\n  public get root() {\n    return this.scopes[0];\n  }\n\n  /**\n   * Returns true if this construct or the scopes in which it is defined are\n   * locked.\n   */\n  public get locked() {\n    if (this._locked) {\n      return true;\n    }\n\n    if (this.scope && this.scope.node.locked) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Add an ordering dependency on another construct.\n   *\n   * An `IDependable`\n   */\n  public addDependency(...deps: IDependable[]) {\n    for (const d of deps) {\n      this._dependencies.add(d);\n    }\n  }\n\n  /**\n   * Return all dependencies registered on this node (non-recursive).\n   */\n  public get dependencies(): IConstruct[] {\n    const result = new Array<IConstruct>();\n    for (const dep of this._dependencies) {\n      for (const root of Dependable.of(dep).dependencyRoots) {\n        result.push(root);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Remove the child with the given name, if present.\n   *\n   * @returns Whether a child with the given name was deleted.\n   * @experimental\n   */\n  public tryRemoveChild(childName: string): boolean {\n    if (!(childName in this._children)) { return false; }\n    delete this._children[childName];\n    return true;\n  }\n\n  /**\n   * Adds a validation to this construct.\n   *\n   * When `node.validate()` is called, the `validate()` method will be called on\n   * all validations and all errors will be returned.\n   *\n   * @param validation The validation object\n   */\n  public addValidation(validation: IValidation) {\n    this._validations.push(validation);\n  }\n\n  /**\n   * Validates this construct.\n   *\n   * Invokes the `validate()` method on all validations added through\n   * `addValidation()`.\n   *\n   * @returns an array of validation error messages associated with this\n   * construct.\n   */\n  public validate(): string[] {\n    const deprecated = ['validate', 'onValidate', 'synthesize', 'onSynthesize', 'prepare', 'onPrepare'];\n    for (const method of deprecated) {\n      if (typeof((this.host as any)[method]) === 'function') {\n        throw new Error(`the construct \"${this.path}\" has a \"${method}()\" method which is no longer supported. Use \"construct.node.addValidation()\" to add validations to a construct`);\n      }\n    }\n\n    const errors = new Array<string>();\n    for (const v of this._validations) {\n      errors.push(...v.validate());\n    }\n\n    return errors;\n  }\n\n  /**\n   * Locks this construct from allowing more children to be added. After this\n   * call, no more children can be added to this construct or to any children.\n   */\n  public lock() {\n    this._locked = true;\n  }\n\n  /**\n   * Adds a child construct to this node.\n   *\n   * @param child The child construct\n   * @param childName The type name of the child construct.\n   * @returns The resolved path part name of the child\n   */\n  private addChild(child: Construct, childName: string) {\n    if (this.locked) {\n\n      // special error if root is locked\n      if (!this.path) {\n        throw new Error('Cannot add children during synthesis');\n      }\n\n      throw new Error(`Cannot add children to \"${this.path}\" during synthesis`);\n    }\n\n    if (this._children[childName]) {\n      const name = this.id ?? '';\n      const typeName = this.host.constructor.name;\n      throw new Error(`There is already a Construct with name '${childName}' in ${typeName}${name.length > 0 ? ' [' + name + ']' : ''}`);\n    }\n\n    this._children[childName] = child;\n  }\n}\n\n/**\n * Represents the building block of the construct graph.\n *\n * All constructs besides the root construct must be created within the scope of\n * another construct.\n */\nexport class Construct implements IConstruct {\n  /**\n   * Checks if `x` is a construct.\n   *\n   * Use this method instead of `instanceof` to properly detect `Construct`\n   * instances, even when the construct library is symlinked.\n   *\n   * Explanation: in JavaScript, multiple copies of the `constructs` library on\n   * disk are seen as independent, completely different libraries. As a\n   * consequence, the class `Construct` in each copy of the `constructs` library\n   * is seen as a different class, and an instance of one class will not test as\n   * `instanceof` the other class. `npm install` will not create installations\n   * like this, but users may manually symlink construct libraries together or\n   * use a monorepo tool: in those cases, multiple copies of the `constructs`\n   * library can be accidentally installed, and `instanceof` will behave\n   * unpredictably. It is safest to avoid using `instanceof`, and using\n   * this type-testing method instead.\n   *\n   * @returns true if `x` is an object created from a class which extends `Construct`.\n   * @param x Any object\n   */\n  public static isConstruct(x: any): x is Construct {\n    return x && typeof x === 'object' && x[CONSTRUCT_SYM];\n  }\n\n  /**\n   * The tree node.\n   */\n  public readonly node: Node;\n\n  /**\n   * Creates a new construct node.\n   *\n   * @param scope The scope in which to define this construct\n   * @param id The scoped construct ID. Must be unique amongst siblings. If\n   * the ID includes a path separator (`/`), then it will be replaced by double\n   * dash `--`.\n   */\n  constructor(scope: Construct, id: string) {\n    this.node = new Node(this, scope, id);\n\n    // implement IDependable privately\n    Dependable.implement(this, {\n      dependencyRoots: [this],\n    });\n  }\n\n  /**\n   * Returns a string representation of this construct.\n   */\n  public toString() {\n    return this.node.path || '<root>';\n  }\n}\n\n/**\n * Implement this interface in order for the construct to be able to validate itself.\n */\nexport interface IValidation {\n  /**\n   * Validate the current construct.\n   *\n   * This method can be implemented by derived constructs in order to perform\n   * validation logic. It is called on all constructs before synthesis.\n   *\n   * @returns An array of validation error messages, or an empty array if there the construct is valid.\n   */\n  validate(): string[];\n}\n\n/**\n * In what order to return constructs\n */\nexport enum ConstructOrder {\n  /**\n   * Depth-first, pre-order\n   */\n  PREORDER,\n\n  /**\n   * Depth-first, post-order (leaf nodes first)\n   */\n  POSTORDER\n}\n\nconst PATH_SEP_REGEX = new RegExp(`${Node.PATH_SEP}`, 'g');\n\n/**\n * Return a sanitized version of an arbitrary string, so it can be used as an ID\n */\nfunction sanitizeId(id: string) {\n  // Escape path seps as double dashes\n  return id.replace(PATH_SEP_REGEX, '--');\n}\n\n/**\n * Options for `construct.addMetadata()`.\n */\nexport interface MetadataOptions {\n  /**\n   * Include stack trace with metadata entry.\n   * @default false\n   */\n  readonly stackTrace?: boolean;\n\n  /**\n   * A JavaScript function to begin tracing from.\n   *\n   * This option is ignored unless `stackTrace` is `true`.\n   *\n   * @default addMetadata()\n   */\n  readonly traceFromFunction?: any;\n}\n\n// Mark all instances of 'Construct'\nObject.defineProperty(Construct.prototype, CONSTRUCT_SYM, {\n  value: true,\n  enumerable: false,\n  writable: false,\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbWV0YWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQW4gZW50cnkgaW4gdGhlIGNvbnN0cnVjdCBtZXRhZGF0YSB0YWJsZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNZXRhZGF0YUVudHJ5IHtcbiAgLyoqXG4gICAqIFRoZSBtZXRhZGF0YSBlbnRyeSB0eXBlLlxuICAgKi9cbiAgcmVhZG9ubHkgdHlwZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZGF0YS5cbiAgICovXG4gIHJlYWRvbmx5IGRhdGE6IGFueTtcblxuICAvKipcbiAgICogU3RhY2sgdHJhY2UgYXQgdGhlIHBvaW50IG9mIGFkZGluZyB0aGUgbWV0YWRhdGEuXG4gICAqXG4gICAqIE9ubHkgYXZhaWxhYmxlIGlmIGBhZGRNZXRhZGF0YSgpYCBpcyBjYWxsZWQgd2l0aCBgc3RhY2tUcmFjZTogdHJ1ZWAuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gbm8gdHJhY2UgaW5mb3JtYXRpb25cbiAgICovXG4gIHJlYWRvbmx5IHRyYWNlPzogc3RyaW5nW107XG59XG4iXX0=","export * from './construct';\nexport * from './metadata';\nexport * from './dependency';","import * as fs from \"fs\";\nimport * as path from \"path\";\nimport { IConstruct } from \"constructs\";\n\nconst CONNECTIONS_SYMBOL = Symbol.for(\"@winglang/sdk.core.Connections\");\n\nexport const CONNECTIONS_FILE_PATH = \"connections.json\";\n\n/**\n * Connections are a way to track relationships between constructs.\n */\nexport class Connections {\n  /**\n   * Return the matching Connections of the given construct tree.\n   */\n  public static of(construct: IConstruct): Connections {\n    let connections = (construct.node.root as any)[CONNECTIONS_SYMBOL];\n\n    if (!connections) {\n      connections = new Connections();\n      (construct.node.root as any)[CONNECTIONS_SYMBOL] = connections;\n    }\n\n    return connections;\n  }\n\n  private readonly _connections: Connection[] = [];\n  private constructor() {}\n\n  /**\n   * Adds a connection between two constructs. A connection is a piece of\n   * metadata describing how one construct is related to another construct.\n   */\n  public add(props: AddConnectionProps) {\n    const connection = {\n      source: props.source,\n      target: props.target,\n      name: props.name,\n    };\n\n    // avoid duplicate connections\n    if (\n      this._connections.some(\n        (c) =>\n          c.source === connection.source &&\n          c.target === connection.target &&\n          c.name === connection.name\n      )\n    ) {\n      return;\n    }\n\n    this._connections.push(connection);\n  }\n\n  /**\n   * Synthesize `connections.json` to the given directory.\n   */\n  public synth(outdir: string) {\n    const connections = this._connections.map((c) => ({\n      source: c.source.node.path,\n      target: c.target.node.path,\n      name: c.name,\n    }));\n\n    const tree = {\n      version: \"connections-0.1\",\n      connections,\n    };\n\n    fs.writeFileSync(\n      path.join(outdir, CONNECTIONS_FILE_PATH),\n      JSON.stringify(tree, undefined, 2),\n      { encoding: \"utf8\" }\n    );\n  }\n}\n\n/**\n * Props for `Connections.add`.\n */\nexport interface AddConnectionProps {\n  /**\n   * The source of the connection.\n   */\n  readonly source: IConstruct;\n\n  /**\n   * The target of the connection.\n   */\n  readonly target: IConstruct;\n\n  /**\n   * A name for the connection.\n   */\n  readonly name: string;\n}\n\n/**\n * A connection to another construct.\n */\nexport interface Connection {\n  /**\n   * The source of the connection.\n   */\n  readonly source: IConstruct;\n\n  /**\n   * The target of the connection.\n   */\n  readonly target: IConstruct;\n\n  /**\n   * A name for the connection.\n   */\n  readonly name: string;\n}\n","import {\n  IConstruct,\n  Node as ConstructsNode,\n  ConstructOrder,\n  IDependable,\n  MetadataOptions,\n  IValidation,\n} from \"constructs\";\nimport { Connections } from \"../core/connections\";\n\nconst NODE_SYMBOL = Symbol.for(\"@winglang/sdk.std.Node\");\nexport const APP_SYMBOL = Symbol.for(\"@winglang/sdk.std.Node/app\");\nconst ROOT_SYMBOL = Symbol.for(\"@winglang/sdk.std.Node/root\");\n\nexport const CONNECTIONS_FILE_PATH = \"connections.json\";\nexport const SDK_SOURCE_MODULE = \"@winglang/sdk\";\n\n/**\n * The internal node of a construct.\n */\nexport class Node {\n  /**\n   * Marks a type as the root of the tree.\n   * @param rootConstructor\n   * @internal\n   */\n  public static _markRoot(rootConstructor: any) {\n    rootConstructor[ROOT_SYMBOL] = true;\n  }\n\n  /**\n   * Return the internal construct node.\n   */\n  public static of(construct: IConstruct): Node {\n    let node = (construct as any)[NODE_SYMBOL];\n\n    if (!node) {\n      node = new Node(construct);\n      (construct as any)[NODE_SYMBOL] = node;\n    }\n\n    return node;\n  }\n\n  /**\n   * Title of the construct for display purposes.\n   */\n  public title?: string;\n\n  /**\n   * Description of the construct for display purposes.\n   */\n  public description?: string;\n\n  /**\n   * The source file or library where the construct was defined.\n   */\n  public sourceModule?: string;\n\n  /**\n   * Whether the construct should be hidden by default in tree visualizations.\n   */\n  public hidden?: boolean;\n\n  private readonly _constructsNode: ConstructsNode;\n  private readonly _connections: Connections;\n  private _app: IApp | undefined;\n  private _root: IConstruct | undefined;\n\n  private constructor(private readonly construct: IConstruct) {\n    this._constructsNode = construct.node;\n    this._connections = Connections.of(construct); // tree-unique instance\n  }\n\n  /**\n   * Adds a connection between two constructs. A connection is a piece of\n   * metadata describing how one construct is related to another construct.\n   */\n  public addConnection(props: AddConnectionProps) {\n    this._connections.add(props);\n  }\n\n  // ---- constructs 10.x APIs ----\n  // https://github.com/aws/constructs/blob/10.x/src/construct.ts\n\n  /**\n   * Returns the scope in which this construct is defined.\n   *\n   * The value is `undefined` at the root of the construct scope tree.\n   */\n  public get scope(): IConstruct | undefined {\n    return this._constructsNode.scope;\n  }\n\n  /**\n   * The id of this construct within the current scope.\n   *\n   * This is a a scope-unique id. To obtain an app-unique id for this construct, use `addr`.\n   */\n  public get id(): string {\n    return this._constructsNode.id;\n  }\n\n  /**\n   * The full, absolute path of this construct in the tree.\n   *\n   * Components are separated by '/'.\n   */\n  public get path(): string {\n    return this._constructsNode.path;\n  }\n\n  /**\n   * Returns an opaque tree-unique address for this construct.\n   *\n   * Addresses are 42 characters hexadecimal strings. They begin with \"c8\"\n   * followed by 40 lowercase hexadecimal characters (0-9a-f).\n   *\n   * Addresses are calculated using a SHA-1 of the components of the construct\n   * path.\n   *\n   * To enable refactorings of construct trees, constructs with the ID `Default`\n   * will be excluded from the calculation. In those cases constructs in the\n   * same tree may have the same addreess.\n   *\n   * @example c83a2846e506bcc5f10682b564084bca2d275709ee\n   */\n  public get addr(): string {\n    return this._constructsNode.addr;\n  }\n\n  /**\n   * Return a direct child by id, or undefined\n   *\n   * @param id Identifier of direct child\n   * @returns the child if found, or undefined\n   */\n  public tryFindChild(id: string): IConstruct | undefined {\n    return this._constructsNode.tryFindChild(id);\n  }\n\n  /**\n   * Return a direct child by id\n   *\n   * Throws an error if the child is not found.\n   *\n   * @param id Identifier of direct child\n   * @returns Child with the given id.\n   */\n  public findChild(id: string): IConstruct {\n    return this._constructsNode.findChild(id);\n  }\n\n  /**\n   * Returns the child construct that has the id `Default` or `Resource\"`.\n   * This is usually the construct that provides the bulk of the underlying functionality.\n   * Useful for modifications of the underlying construct that are not available at the higher levels.\n   *\n   * @throws if there is more than one child\n   * @returns a construct or undefined if there is no default child\n   */\n  public get defaultChild(): IConstruct | undefined {\n    return this._constructsNode.defaultChild;\n  }\n\n  /**\n   * Override the defaultChild property.\n   *\n   * This should only be used in the cases where the correct\n   * default child is not named 'Resource' or 'Default' as it\n   * should be.\n   *\n   * If you set this to undefined, the default behavior of finding\n   * the child named 'Resource' or 'Default' will be used.\n   */\n  public set defaultChild(value: IConstruct | undefined) {\n    this._constructsNode.defaultChild = value;\n  }\n\n  /**\n   * All direct children of this construct.\n   */\n  public get children() {\n    return this._constructsNode.children;\n  }\n\n  /**\n   * Return this construct and all of its children in the given order\n   */\n  public findAll(\n    order: ConstructOrder = ConstructOrder.PREORDER\n  ): IConstruct[] {\n    return this._constructsNode.findAll(order);\n  }\n\n  /**\n   * This can be used to set contextual values.\n   * Context must be set before any children are added, since children may consult context info during construction.\n   * If the key already exists, it will be overridden.\n   * @param key The context key\n   * @param value The context value\n   */\n  public setContext(key: string, value: any) {\n    this._constructsNode.setContext(key, value);\n  }\n\n  /**\n   * Retrieves a value from tree context if present. Otherwise, would throw an error.\n   *\n   * Context is usually initialized at the root, but can be overridden at any point in the tree.\n   *\n   * @param key The context key\n   * @returns The context value or throws error if there is no context value for this key\n   */\n  public getContext(key: string): any {\n    return this._constructsNode.getContext(key);\n  }\n\n  /**\n   * Retrieves a value from tree context.\n   *\n   * Context is usually initialized at the root, but can be overridden at any point in the tree.\n   *\n   * @param key The context key\n   * @returns The context value or `undefined` if there is no context value for this key.\n   */\n  public tryGetContext(key: string): any {\n    return this._constructsNode.tryGetContext(key);\n  }\n\n  /**\n   * An immutable array of metadata objects associated with this construct.\n   * This can be used, for example, to implement support for deprecation notices, source mapping, etc.\n   */\n  public get metadata() {\n    return this._constructsNode.metadata;\n  }\n\n  /**\n   * Adds a metadata entry to this construct.\n   * Entries are arbitrary values and will also include a stack trace to allow tracing back to\n   * the code location for when the entry was added. It can be used, for example, to include source\n   * mapping in CloudFormation templates to improve diagnostics.\n   *\n   * @param type a string denoting the type of metadata\n   * @param data the value of the metadata (can be a Token). If null/undefined, metadata will not be added.\n   * @param options options\n   */\n  public addMetadata(\n    type: string,\n    data: any,\n    options: MetadataOptions = {}\n  ): void {\n    this._constructsNode.addMetadata(type, data, options);\n  }\n\n  /**\n   * All parent scopes of this construct.\n   *\n   * @returns a list of parent scopes. The last element in the list will always\n   * be the current construct and the first element will be the root of the\n   * tree.\n   */\n  public get scopes(): IConstruct[] {\n    return this._constructsNode.scopes;\n  }\n\n  /**\n   * Returns the root of the construct tree (the `cloud.App` object).\n   *\n   * Similar to `app`.\n   *\n   * @returns The root of the construct tree.\n   */\n  public get root(): IConstruct {\n    if (!this._root) {\n      this._root = this.findRoot(this.construct);\n    }\n\n    return this._root;\n  }\n\n  /**\n   * Returns the root of the construct tree (the `cloud.App` object).\n   *\n   * Similar to `root`.\n   *\n   * @returns The root of the construct tree.\n   */\n  public get app(): IApp {\n    if (!this._app) {\n      this._app = this.findApp(this.construct);\n    }\n\n    return this._app;\n  }\n\n  /**\n   * Returns true if this construct or the scopes in which it is defined are\n   * locked.\n   */\n  public get locked() {\n    return this._constructsNode.locked;\n  }\n\n  /**\n   * Add an ordering dependency on another construct.\n   *\n   * An `IDependable`\n   */\n  public addDependency(...deps: IDependable[]) {\n    this._constructsNode.addDependency(...deps);\n  }\n\n  /**\n   * Return all dependencies registered on this node (non-recursive).\n   */\n  public get dependencies(): IConstruct[] {\n    return this._constructsNode.dependencies;\n  }\n\n  /**\n   * Remove the child with the given name, if present.\n   *\n   * @returns Whether a child with the given name was deleted.\n   * @experimental\n   */\n  public tryRemoveChild(childName: string): boolean {\n    return this._constructsNode.tryRemoveChild(childName);\n  }\n\n  /**\n   * Adds a validation to this construct.\n   *\n   * When `node.validate()` is called, the `validate()` method will be called on\n   * all validations and all errors will be returned.\n   *\n   * @param validation The validation object\n   */\n  public addValidation(validation: IValidation) {\n    this._constructsNode.addValidation(validation);\n  }\n\n  /**\n   * Validates this construct.\n   *\n   * Invokes the `validate()` method on all validations added through\n   * `addValidation()`.\n   *\n   * @returns an array of validation error messages associated with this\n   * construct.\n   */\n  public validate(): string[] {\n    return this._constructsNode.validate();\n  }\n\n  /**\n   * Locks this construct from allowing more children to be added. After this\n   * call, no more children can be added to this construct or to any children.\n   */\n  public lock() {\n    this._constructsNode.lock();\n  }\n\n  /**\n   * Returns the root app.\n   */\n  private findApp(scope: IConstruct): IApp {\n    if (isApp(scope)) {\n      return scope as IApp;\n    }\n\n    if (!scope.node.scope) {\n      throw new Error(\"Cannot find root app\");\n    }\n\n    return this.findApp(scope.node.scope);\n  }\n\n  private findRoot(scope: IConstruct): IConstruct {\n    if (isRoot(scope)) {\n      return scope;\n    }\n\n    if (!scope.node.scope) {\n      throw new Error(\"Cannot find root construct\");\n    }\n\n    return this.findRoot(scope.node.scope);\n  }\n}\n\n/**\n * Props for `Node.addConnection`.\n */\nexport interface AddConnectionProps {\n  /**\n   * The source of the connection.\n   */\n  readonly source: IConstruct;\n\n  /**\n   * The target of the connection.\n   */\n  readonly target: IConstruct;\n\n  /**\n   * A name for the connection.\n   */\n  readonly name: string;\n}\n\n/**\n * Represents a Wing application.\n */\nexport interface IApp extends IConstruct {\n  /**\n   * Type marker.\n   * @internal\n   **/\n  readonly [APP_SYMBOL]: true;\n\n  /**\n   * The `.wing` directory into which you can emit artifacts during preflight.\n   */\n  readonly workdir: string;\n\n  /**\n   * `true` if this is a testing environment\n   */\n  readonly isTestEnvironment: boolean;\n\n  /**\n   * The directory of the entrypoint of the current program.\n   */\n  readonly entrypointDir: string;\n\n  /**\n   * Generate a unique ID for the given scope and prefix. The newly generated ID is\n   * guaranteed to be unique within the given scope.\n   * It will have the form '{prefix}{n}', where '{prefix}' is the given prefix and '{n}' is an\n   * ascending sequence of integers starting from '0'.\n   *\n   * @param scope to guarantee uniqueness in\n   * @param prefix prepended to the unique identifier\n   */\n  makeId(scope: IConstruct, prefix?: string): string;\n}\n\nfunction isApp(x: any): x is IApp {\n  return x && x[APP_SYMBOL];\n}\n\nfunction isRoot(x: any): boolean {\n  return x && x.constructor && x.constructor[ROOT_SYMBOL];\n}\n","// Code in this file will be automatically included in all inflight code bundles,\n// so avoid importing anything heavy here.\nimport { deepStrictEqual, notDeepStrictEqual } from \"node:assert\";\nimport type { Construct } from \"constructs\";\nimport { Node } from \"./std/node\";\n\nexport function eq(a: any, b: any): boolean {\n  try {\n    deepStrictEqual(a, b);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function neq(a: any, b: any): boolean {\n  try {\n    notDeepStrictEqual(a, b);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function assert(condition: any, message: string): asserts condition {\n  if (!condition) {\n    throw new Error(\"assertion failed: \" + message);\n  }\n}\n\nexport function range(start: number, end: number, inclusive: boolean) {\n  function* iterator() {\n    let i = start;\n    let limit = inclusive ? (end < start ? end - 1 : end + 1) : end;\n    while (i < limit) yield i++;\n    while (i > limit) yield i--;\n  }\n  return iterator();\n}\n\nexport function nodeof(construct: Construct): Node {\n  return Node.of(construct);\n}\n\nexport function normalPath(path: string): string {\n  return path.replace(/\\\\+/g, \"/\");\n}\n\nexport function unwrap<T>(value: T): T | never {\n  if (value != null) {\n    return value;\n  }\n  throw new Error(\"Unexpected nil\");\n}\n","bring cloud;\n\nlog(\"Hello winglang. Preflight!\");\n\nlet makeGreeting = new cloud.Function(inflight (name: str?): str => {\n    log(\"Received name: {name}\");\n    let greeting = \"Hello, {name}\";\n    log(\"returned: {greeting}\");\n    return greeting;\n});\n\nbring expect;\n\ntest \"It will return 'Hello, <mame>'\" {\n    expect.equal(\"Hello, Winglang\", makeGreeting.invoke(\"Winglang\"));\n}   ","\"use strict\";\nvar $handler = undefined;\nexports.handler = async function(event) {\n  $handler = $handler ?? (\n          (await (async () => {\n            const $Closure1Client = \n          require(\"/home/zoosman/dev/ifc-winglang/target/main.tfaws/.wing/inflight.$Closure1-1.js\")({\n          })\n        ;\n            const client = new $Closure1Client({\n            });\n            if (client.$inflight_init) { await client.$inflight_init(); }\n            return client;\n          })())\n        );\n  return await $handler.handle(event === null ? undefined : event);\n};"],"mappings":"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","names":["exports","exports","exports","exports","ConstructOrder","exports","exports","exports","exports","exports","exports","module"]}